package com.alpsank.model;

import java.sql.*;

import com.alpsank.entities.User;

public class UserModel {
	

	private static final String USER_TABLE = "app_user";
		
	/**
	 * This method returns a User if the username and password
	 * match the ones in the database. If not, it will return null
	 * @param username
	 * @param password
	 * @return User if username and password match, or null otherwise
	 */
	public User login(String username, String password){
		ResultSet results = null;
		Connection dbConnection = null;

		User user = null;

		try{
			dbConnection = DatabaseHandler.getDBConnection();
			String query = "SELECT * FROM app_user WHERE user_id = '" +
					username + "' and password = '" + password + "'";
			
			Statement select = dbConnection.createStatement();

			results = select.executeQuery(query);
			if(results.next()){
				user = new User( results.getString("user_id"), results.getString("password"), results.getString("firstname"), results.getString("lastname"), results.getString("email"), results.getString("telephone1"), results.getString("telephone2"), results.getString("address"), results.getString("role")  );						
			}
		}catch(SQLException e){
			DatabaseHandler.printSQLException(e);
		}finally{
			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					DatabaseHandler.printSQLException(e);
				}
			}
		}
		return user;
	}

	/**
	 * @param User user. A general user object 
	 * containing all necessary information. 
	 * IMPORTANT, the role must be specified. This method
	 * adds a librarian, library user or an administrator
	 * @return true if succeed, false otherwise
	 * @throws SQLException 
	 */
	public boolean register(User user) {
		
		String insert_AppUser = "INSERT INTO APP_USER"  + 
								"(USER_ID, EMAIL, FIRSTNAME, LASTNAME, ADDRESS, " +
								"TELEPHONE1, TELEPHONE2, PASSWORD, ROLE) VALUES" +
								"(?,?,?,?,?,?,?,?,?)";
		
		String insert_UserType = "";
		String insert_LibUser = "INSERT INTO LIB_USER" +
							   	"(LIB_USER_ID) VALUES" +
							   	"(?)";
		
		String insert_Librarian = "INSERT INTO LIBRARIAN" +
							   	"(LIBRARIAN_ID) VALUES" +
							   	"(?)";
		
		String insert_Admin = "INSERT INTO ADMINISTRATOR" +
							   	"(ADMINISTRATOR_ID) VALUES" +
							   	"(?)";
		int result1 = 0;
		int result2 = 0;
		
		Connection dbConnect = null;
		PreparedStatement prepareInsert1 = null;
		PreparedStatement prepareInsert2 = null;
		try{
			dbConnect = DatabaseHandler.getDBConnection();
			//Prepare multi-statement transaction
			dbConnect.setAutoCommit(false);
			prepareInsert1 = dbConnect.prepareStatement(insert_AppUser);
			prepareInsert1.setString(1, user.getUsername());
			prepareInsert1.setString(2, user.getEmail());
			// Handle NULL values
			if (user.getFirstName() != null )prepareInsert1.setString(3, user.getFirstName());
			else prepareInsert1.setNull(3, Types.VARCHAR);
			if (user.getLastName() != null )prepareInsert1.setString(4, user.getLastName());
			else prepareInsert1.setNull(4, Types.VARCHAR);
			if (user.getAddress() != null )prepareInsert1.setString(5, user.getAddress());
			else prepareInsert1.setNull(5, Types.VARCHAR);
			if (user.getPhone1() != null )prepareInsert1.setString(6, user.getPhone1());
			else prepareInsert1.setNull(6, Types.VARCHAR);
			if (user.getPhone2() != null )prepareInsert1.setString(7, user.getPhone2());
			else prepareInsert1.setNull(7, Types.VARCHAR);
			prepareInsert1.setString(8, user.getPassword());
			prepareInsert1.setString(9, user.getRole());

			result1 = prepareInsert1.executeUpdate();
			
			if (user.getRole().equalsIgnoreCase("library user")) insert_UserType = insert_LibUser;
			else if (user.getRole().equalsIgnoreCase("librarian")) insert_UserType = insert_Librarian;
			else insert_UserType = insert_Admin;
			
			prepareInsert2 = dbConnect.prepareStatement(insert_UserType);
			prepareInsert2.setString(1, user.getUsername());
			result2 = prepareInsert2.executeUpdate();

			dbConnect.commit();
			
		}catch(SQLException e){
			DatabaseHandler.printSQLException(e);
			
			try {
				dbConnect.rollback();
			} catch (SQLException e1) {
				DatabaseHandler.printSQLException(e1);
			}
		}
		finally{
			try{
				if (prepareInsert1 != null) {
					prepareInsert1.close();
				}
	 
				if (prepareInsert2 != null) {
					prepareInsert2.close();
				}
	 
				if (dbConnect != null) {
					dbConnect.close();
				}
			}catch (SQLException e){
				DatabaseHandler.printSQLException(e);
			}
		}
		return (result1 > 0) && (result2 > 0);
				 
	}
	
	
	/**
	 * Check whether a user with an email or name equal to the param, exists in
	 * the DB
	 * 
	 * @param username
	 * @return boolean: true if user exists, false otherwise
	 */
	public static boolean exists(String username) {
		ResultSet results = null;
		Connection dbConnection = null;

		boolean exists = false; 
		
		try{
			dbConnection = DatabaseHandler.getDBConnection();
			String query = "SELECT 1 FROM app_user WHERE user_id = '" +
					username+"'";
			Statement select = dbConnection.createStatement();

			results = select.executeQuery(query);
			exists = results.next();
		}catch(SQLException e){
			DatabaseHandler.printSQLException(e);
		}finally{
			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					DatabaseHandler.printSQLException(e);
				}
			}
		}
		return exists;
	}

	/**
	 * Check whether a user with the @param: email exists in the DB
	 * 
	 * @param userId
	 * @return boolean: true if user exists, false otherwise
	 */
	public static boolean isEmailUsed(String email) {
		boolean result = false;
		Statement st = null;
		Connection con=null;
		
		try {
			con = DatabaseHandler.getDBConnection();
			String query = "SELECT * FROM " +USER_TABLE+ " WHERE email = '"
					+ email + "'";
			st = con.createStatement();
			ResultSet rs = st.executeQuery(query);
			result = rs.next();
			
			if (st != null) {
				st.close();
			}

		} catch (SQLException e) {
			DatabaseHandler.printSQLException(e);
		} finally {
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e) {
					DatabaseHandler.printSQLException(e);
				}
			}
			
			return result;
		}
	}
	
//	public int updateUser(User user) throws SQLException {
//		int updated = -1;
//		PreparedStatement pstmt = null;
//
//		// return -1 if the user does not exist
//		if (!exists(user.getUsername()))
//			return -1;
//		
//
//		try {
//			Connection con = DatabaseHandler.getDBConnection();
//			String query = "UPDATE "+ DatabaseHandler.DB+ "."+USER_TABLE+ " SET password=?, email=?, firstname=?, lastname=?, Address=?, telephone1=?, telephone2=?, role=?"
//					+ " WHERE username=?";
//			pstmt = con.prepareStatement(query);
//			pstmt.setString(1, user.getPassword());	
//			pstmt.setString(2, user.getEmail());
//			pstmt.setString(3, user.getFirstName());
//			pstmt.setString(4, user.getLastName());
//			pstmt.setString(5, user.getAddress());
//			pstmt.setString(6, user.getPhone1());
//			pstmt.setString(7, user.getPhone2());
//			pstmt.setString(8, user.getRole());
//	
//
//			updated = pstmt.executeUpdate();
//
//		} catch (SQLException e) {
//			DatabaseHandler.printSQLException(e);
//		} finally {
//			if (pstmt != null) {
//				pstmt.close();
//			}
//			return updated;
//		}
//	}
	
	public static void main(String[] args) {
		testExist();
	}
	 
	public static void testExist() {
			System.out.println(isEmailUsed("mouhyi@hululu.com"));
			System.out.println(exists("mouhyi"));
			System.out.println(isEmailUsed("mouhyi1@hululu.com"));
			System.out.println(exists("mouhyi1"));
	}
}
